{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Execution Streaming ML The siddhi-execution-streamingml extension is a Siddhi extension that provides streaming machine learning (clustering, classification and regression) on event streams. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.0.5 . Features bayesianRegression ( Stream Processor ) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution kMeansIncremental ( Stream Processor ) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm kMeansMiniBatch ( Stream Processor ) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). perceptronClassifier ( Stream Processor ) This extension predicts using a linear binary classification Perceptron model. updateBayesianRegression ( Stream Processor ) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. updatePerceptronClassifier ( Stream Processor ) This extension builds/updates a linear binary classification Perceptron model. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-execution-streaming-ml","text":"The siddhi-execution-streamingml extension is a Siddhi extension that provides streaming machine learning (clustering, classification and regression) on event streams. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Execution Streaming ML"},{"location":"#download","text":"Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.0.5 .","title":"Latest API Docs"},{"location":"#features","text":"bayesianRegression ( Stream Processor ) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution kMeansIncremental ( Stream Processor ) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm kMeansMiniBatch ( Stream Processor ) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). perceptronClassifier ( Stream Processor ) This extension predicts using a linear binary classification Perceptron model. updateBayesianRegression ( Stream Processor ) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. updatePerceptronClassifier ( Stream Processor ) This extension builds/updates a linear binary classification Perceptron model.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.10/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.10/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.10/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.10/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.11/","text":"API Docs - v1.0.11 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.11"},{"location":"api/1.0.11/#api-docs-v1011","text":"","title":"API Docs - v1.0.11"},{"location":"api/1.0.11/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.11/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.11/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.11/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.11/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.12/","text":"API Docs - v1.0.12 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.12"},{"location":"api/1.0.12/#api-docs-v1012","text":"","title":"API Docs - v1.0.12"},{"location":"api/1.0.12/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.12/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.12/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.12/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.12/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.13/","text":"API Docs - v1.0.13 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.13"},{"location":"api/1.0.13/#api-docs-v1013","text":"","title":"API Docs - v1.0.13"},{"location":"api/1.0.13/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.13/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.13/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.13/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.13/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.14/","text":"API Docs - v1.0.14 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.14"},{"location":"api/1.0.14/#api-docs-v1014","text":"","title":"API Docs - v1.0.14"},{"location":"api/1.0.14/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.14/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.14/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.14/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.14/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.15/","text":"API Docs - v1.0.15 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.15"},{"location":"api/1.0.15/#api-docs-v1015","text":"","title":"API Docs - v1.0.15"},{"location":"api/1.0.15/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.15/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.15/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.15/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.15/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.16/","text":"API Docs - v1.0.16 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.16"},{"location":"api/1.0.16/#api-docs-v1016","text":"","title":"API Docs - v1.0.16"},{"location":"api/1.0.16/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.16/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.16/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.16/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.16/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.17/","text":"API Docs - v1.0.17 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.17"},{"location":"api/1.0.17/#api-docs-v1017","text":"","title":"API Docs - v1.0.17"},{"location":"api/1.0.17/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.17/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.17/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.17/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.17/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.18/","text":"API Docs - v1.0.18 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.18"},{"location":"api/1.0.18/#api-docs-v1018","text":"","title":"API Docs - v1.0.18"},{"location":"api/1.0.18/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.18/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.18/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.18/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.18/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.19/","text":"API Docs - v1.0.19 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.19"},{"location":"api/1.0.19/#api-docs-v1019","text":"","title":"API Docs - v1.0.19"},{"location":"api/1.0.19/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.19/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.19/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.19/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.19/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.20/","text":"API Docs - v1.0.20 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.20"},{"location":"api/1.0.20/#api-docs-v1020","text":"","title":"API Docs - v1.0.20"},{"location":"api/1.0.20/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.20/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.20/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.20/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.20/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.21/","text":"API Docs - v1.0.21 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.21"},{"location":"api/1.0.21/#api-docs-v1021","text":"","title":"API Docs - v1.0.21"},{"location":"api/1.0.21/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.21/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.21/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.21/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.21/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.22/","text":"API Docs - v1.0.22 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.22"},{"location":"api/1.0.22/#api-docs-v1022","text":"","title":"API Docs - v1.0.22"},{"location":"api/1.0.22/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.22/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.22/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.22/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.22/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 Streamingml kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.7/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.7/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.7/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.7/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.8/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.8/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.8/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.8/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.0.9/","text":"API Docs - v1.0.9 Streamingml kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.0.9"},{"location":"api/1.0.9/#api-docs-v109","text":"","title":"API Docs - v1.0.9"},{"location":"api/1.0.9/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.0.9/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.0.9/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.0.9/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.0.9/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Streamingml bayesianClassification (Stream Processor) This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.features The features of the model that need to be attributes of the stream DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianClassification (Stream Processor) This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, DOUBLE|INT no.of.classes, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. DOUBLE INT No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier. updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.1.0/#bayesianclassification-stream-processor","text":"This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).","title":"bayesianClassification (Stream Processor)"},{"location":"api/1.1.0/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.features The features of the model that need to be attributes of the stream DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/1.1.0/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.1.0/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.1.0/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.1.0/#updatebayesianclassification-stream-processor","text":"This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, DOUBLE|INT no.of.classes, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. DOUBLE INT No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.","title":"updateBayesianClassification (Stream Processor)"},{"location":"api/1.1.0/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/1.1.0/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/1.1.1/","text":"API Docs - v1.1.1 Streamingml bayesianClassification (Stream Processor) This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.features The features of the model that need to be attributes of the stream DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianClassification (Stream Processor) This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, DOUBLE|INT no.of.classes, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. DOUBLE INT No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier. updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"1.1.1"},{"location":"api/1.1.1/#api-docs-v111","text":"","title":"API Docs - v1.1.1"},{"location":"api/1.1.1/#streamingml","text":"","title":"Streamingml"},{"location":"api/1.1.1/#bayesianclassification-stream-processor","text":"This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).","title":"bayesianClassification (Stream Processor)"},{"location":"api/1.1.1/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.features The features of the model that need to be attributes of the stream DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/1.1.1/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/1.1.1/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/1.1.1/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/1.1.1/#updatebayesianclassification-stream-processor","text":"This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, DOUBLE|INT no.of.classes, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. DOUBLE INT No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.","title":"updateBayesianClassification (Stream Processor)"},{"location":"api/1.1.1/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/1.1.1/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Streamingml bayesianClassification (Stream Processor) This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.features The features of the model that need to be attributes of the stream DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianClassification (Stream Processor) This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, DOUBLE|INT no.of.classes, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. DOUBLE INT No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier. updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#streamingml","text":"","title":"Streamingml"},{"location":"api/2.0.0/#bayesianclassification-stream-processor","text":"This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).","title":"bayesianClassification (Stream Processor)"},{"location":"api/2.0.0/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.features The features of the model that need to be attributes of the stream DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/2.0.0/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/2.0.0/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/2.0.0/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/2.0.0/#updatebayesianclassification-stream-processor","text":"This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, DOUBLE|INT no.of.classes, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. DOUBLE INT No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.","title":"updateBayesianClassification (Stream Processor)"},{"location":"api/2.0.0/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/2.0.0/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/2.0.1/","text":"API Docs - v2.0.1 Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions. Streamingml bayesianClassification (Stream Processor) This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.features The features of the model that need to be attributes of the stream DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianClassification (Stream Processor) This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, DOUBLE|INT no.of.classes, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. DOUBLE INT No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier. updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"2.0.1"},{"location":"api/2.0.1/#api-docs-v201","text":"Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.1"},{"location":"api/2.0.1/#streamingml","text":"","title":"Streamingml"},{"location":"api/2.0.1/#bayesianclassification-stream-processor","text":"This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).","title":"bayesianClassification (Stream Processor)"},{"location":"api/2.0.1/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.features The features of the model that need to be attributes of the stream DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/2.0.1/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/2.0.1/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.features This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No No Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/2.0.1/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE No No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. The output is a probability. DOUBLE No No model.features The features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/2.0.1/#updatebayesianclassification-stream-processor","text":"This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, DOUBLE|INT no.of.classes, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. DOUBLE INT No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.","title":"updateBayesianClassification (Stream Processor)"},{"location":"api/2.0.1/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, DOUBLE|INT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. DOUBLE INT No No model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE No No Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/2.0.1/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|INT model.features) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No No learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.features Features of the model that need to be attributes of the stream. DOUBLE INT No No Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/2.0.2/","text":"API Docs - v2.0.2 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Streamingml bayesianClassification (Stream Processor) This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianClassification (Stream Processor) This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. INT No No model.target The target attribute (dependant variable) of the input stream. STRING BOOL No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier. updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"2.0.2"},{"location":"api/2.0.2/#api-docs-v202","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.2"},{"location":"api/2.0.2/#streamingml","text":"","title":"Streamingml"},{"location":"api/2.0.2/#bayesianclassification-stream-processor","text":"This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).","title":"bayesianClassification (Stream Processor)"},{"location":"api/2.0.2/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/2.0.2/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/2.0.2/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/2.0.2/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/2.0.2/#updatebayesianclassification-stream-processor","text":"This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. INT No No model.target The target attribute (dependant variable) of the input stream. STRING BOOL No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.","title":"updateBayesianClassification (Stream Processor)"},{"location":"api/2.0.2/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/2.0.2/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/2.0.3/","text":"API Docs - v2.0.3 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Streamingml bayesianClassification (Stream Processor) This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianClassification (Stream Processor) This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. INT No No model.target The target attribute (dependant variable) of the input stream. STRING BOOL No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier. updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"2.0.3"},{"location":"api/2.0.3/#api-docs-v203","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.3"},{"location":"api/2.0.3/#streamingml","text":"","title":"Streamingml"},{"location":"api/2.0.3/#bayesianclassification-stream-processor","text":"This extension predicts using a Bayesian multivariate logistic regression model. This Bayesian model allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianClassification( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianClassification( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No prediction.samples The number of samples to be drawn from the predictive distribution. Drawing more samples will improve the accuracy of the predictions 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted label (string) DOUBLE confidence Mean probability of the predictive distribution. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', 5000, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian Softmax regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The label is estimated based on 5000 samples from the predictive distribution. The predicted label is emitted to the OutputStream streamalong with the confidence of the prediction (mean of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction string, confidence double).","title":"bayesianClassification (Stream Processor)"},{"location":"api/2.0.3/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/2.0.3/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/2.0.3/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/2.0.3/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/2.0.3/#updatebayesianclassification-stream-processor","text":"This extension train a Bayesian multivariate logistic regression model. We can use this model for multi-class classification. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianClassification( STRING model.name, INT no.of.classes, STRING|BOOL model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No no.of.classes Number of classes to be classified by the model. INT No No model.target The target attribute (dependant variable) of the input stream. STRING BOOL No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used. ADAM STRING Yes No learning.rate The learning rate of the updater. 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 3, attribute_4,attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models is capable of classifying 3 classes. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updateBayesianClassification('model1', 2, attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Softmax regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This models act as a binary classifier.","title":"updateBayesianClassification (Stream Processor)"},{"location":"api/2.0.3/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/2.0.3/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/2.0.4/","text":"API Docs - v2.0.4 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Streamingml bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"2.0.4"},{"location":"api/2.0.4/#api-docs-v204","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.4"},{"location":"api/2.0.4/#streamingml","text":"","title":"Streamingml"},{"location":"api/2.0.4/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/2.0.4/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/2.0.4/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/2.0.4/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/2.0.4/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/2.0.4/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/2.0.5/","text":"API Docs - v2.0.5 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Streamingml bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"2.0.5"},{"location":"api/2.0.5/#api-docs-v205","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.5"},{"location":"api/2.0.5/#streamingml","text":"","title":"Streamingml"},{"location":"api/2.0.5/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/2.0.5/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/2.0.5/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/2.0.5/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/2.0.5/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/2.0.5/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"},{"location":"api/latest/","text":"API Docs - v2.0.5 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Streamingml bayesianRegression (Stream Processor) This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double). kMeansIncremental (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used kMeansMiniBatch (Stream Processor) Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used. perceptronClassifier (Stream Processor) This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). updateBayesianRegression (Stream Processor) This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer. updatePerceptronClassifier (Stream Processor) This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"latest"},{"location":"api/latest/#api-docs-v205","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.5"},{"location":"api/latest/#streamingml","text":"","title":"Streamingml"},{"location":"api/latest/#bayesianregression-stream-processor","text":"This extension predicts using a Bayesian linear regression model.Bayesian linear regression allows determining the uncertainty of each prediction by estimating the full-predictive distribution Syntax streamingml:bayesianRegression( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:bayesianRegression( STRING model.name, INT prediction.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used STRING No No prediction.samples The number of samples to be drawn to estimate the prediction 1000 INT Yes No model.feature The features of the model that need to be attributes of the stream DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value (double) DOUBLE confidence Inverse of the standard deviation of the predictive distribution DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:bayesianRegression('model1', attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Bayesian regression model named model1 to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted value is emitted to the OutputStream streamalong with the prediction confidence (std of predictive distribution) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction double, confidence double).","title":"bayesianRegression (Stream Processor)"},{"location":"api/latest/#kmeansincremental-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed by a query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles Sequential K-Means Clustering at https://www.cs.princeton.edu/courses/archive/fall08/cos436/Duda/C/sk_means.htm Syntax streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansIncremental( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(D) we will return closestCentroidCoordinate1, closestCentroidCoordinate2,... closestCentroidCoordinateD which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster to which the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, 0.2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user provides the decay rate. First two events will be used to initiate the model since the required number of clusters is specified as 2. After the first event itself prediction would start. EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansIncremental(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user doesnt give the decay rate so the default value will be used","title":"kMeansIncremental (Stream Processor)"},{"location":"api/latest/#kmeansminibatch-stream-processor","text":"Performs K-Means clustering on a streaming data set. Data points can be of any dimension and the dimensionality is calculated from number of parameters. All data points to be processed in a single query should be of the same dimensionality. The Euclidean distance is taken as the distance metric. The algorithm resembles mini-batch K-Means. (refer Web-Scale K-Means Clustering by D.Sculley, Google, Inc.). Syntax streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:kMeansMiniBatch( INT no.of.clusters, DOUBLE decay.rate, INT maximum.iterations, INT no.of.events.to.retrain, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic no.of.clusters The assumed number of natural clusters in the data set. INT No No decay.rate this is the decay rate of old data compared to new data. Value of this will be in [0,1]. 0 means only old data used and1 will mean that only new data is used 0.01 DOUBLE Yes No maximum.iterations Number of iterations, the process iterates until the number of maximum iterations is reached or the centroids do not change 50 INT Yes No no.of.events.to.retrain number of events to recalculate cluster centers. 20 INT Yes No model.feature This is a variable length argument. Depending on the dimensionality of data points we will receive coordinates as features along each axis. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types euclideanDistanceToClosestCentroid Represents the Euclidean distance between the current data point and the closest centroid. DOUBLE closestCentroidCoordinate This is a variable length attribute. Depending on the dimensionality(d) we will return closestCentroidCoordinate1 to closestCentroidCoordinated which are the d dimensional coordinates of the closest centroid from the model to the current event. This is the prediction result and this represents the cluster towhich the current event belongs to. DOUBLE Examples EXAMPLE 1 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, 0.2, 10, 20, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user gives all three hyper parameters. first 20 events will be consumed to build the model and from the 21st event prediction would start EXAMPLE 2 define stream InputStream (x double, y double); @info(name = 'query1') from InputStream#streamingml:kMeansMiniBatch(2, x, y) select closestCentroidCoordinate1, closestCentroidCoordinate2, x, y insert into OutputStream; This is an example where user has not specified hyper params. So default values will be used.","title":"kMeansMiniBatch (Stream Processor)"},{"location":"api/latest/#perceptronclassifier-stream-processor","text":"This extension predicts using a linear binary classification Perceptron model. Syntax streamingml:perceptronClassifier( STRING model.name, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:perceptronClassifier( STRING model.name, DOUBLE model.bias, DOUBLE model.threshold, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be used. STRING No No model.bias The bias of the Perceptron algorithm. 0.0 DOUBLE Yes No model.threshold The threshold that separates the two classes. The value specified must be between zero and one. 0.5 DOUBLE Yes No model.feature The features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types prediction The predicted value ( true/false ) BOOL confidenceLevel The probability of the prediction DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias and a 0.5 threshold learning rate to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The predicted label ( true/false ) is emitted to the OutputStream streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into OutputStream; This query uses a Perceptron model named model1 with a 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , attribute_2 , and attribute_3 . The prediction( true/false ) is emitted to the OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double). EXAMPLE 3 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double); from StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) insert all events into OutputStream; This query uses a Perceptron model named model1 with a default 0.0 bias to predict the label of the feature vector represented by attribute_0 , attribute_1 , and attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).","title":"perceptronClassifier (Stream Processor)"},{"location":"api/latest/#updatebayesianregression-stream-processor","text":"This extension builds/updates a linear Bayesian regression model. This extension uses an improved version of stochastic variational inference. Syntax streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updateBayesianRegression( STRING model.name, INT|DOUBLE|LONG|FLOAT model.target, INT model.samples, STRING model.optimizer, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built. STRING No No model.target The target attribute (dependant variable) of the input stream. INT DOUBLE LONG FLOAT No Yes model.samples Number of samples used to construct the gradients. 1 INT Yes No model.optimizer The type of optimization used ADAM STRING Yes No learning.rate The learning rate of the updater 0.05 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types loss loss of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 double ); from StreamA#streamingml:updateBayesianRegression('model1', attribute_4, 2, 'NADAM', 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Bayesian Linear regression model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. This model draws two samples during monte-carlo integration and uses NADAM optimizer.","title":"updateBayesianRegression (Stream Processor)"},{"location":"api/latest/#updateperceptronclassifier-stream-processor","text":"This extension builds/updates a linear binary classification Perceptron model. Syntax streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) streamingml:updatePerceptronClassifier( STRING model.name, BOOL|STRING model.label, DOUBLE learning.rate, DOUBLE|FLOAT|INT|LONG model.feature, DOUBLE|FLOAT|INT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic model.name The name of the model to be built/updated. STRING No No model.label The attribute of the label or the class of the dataset. BOOL STRING No Yes learning.rate The learning rate of the Perceptron algorithm. 0.1 DOUBLE Yes No model.feature Features of the model that need to be attributes of the stream. DOUBLE FLOAT INT LONG No Yes Extra Return Attributes Name Description Possible Types featureWeight Weight of the feature.name of the model. DOUBLE Examples EXAMPLE 1 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a 0.01 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. Updated weights of the model are emitted to the OutputStream stream. EXAMPLE 2 define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string ); from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) insert all events into outputStream; This query builds/updates a Perceptron model named model1 with a default 0.1 learning rate using attribute_0 , attribute_1 , attribute_2 , and attribute_3 as features, and attribute_4 as the label. The updated weights of the model are appended to the outputStream.","title":"updatePerceptronClassifier (Stream Processor)"}]}